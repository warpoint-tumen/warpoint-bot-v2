
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import datetime
import random

TOKEN = "8318731976:AAGRLByy52ordZtigWkkQ-Ux2Hf7x7AiLIE"

tasks = [
    "üìû –û–±–∑–≤–æ–Ω —ç–ª–µ–∫—Ç—Ä–∏–∫–æ–≤ (5 –≤—Å—Ç—Ä–µ—á)",
    "ü§ù –í—Å—Ç—Ä–µ—á–∞ —Å –∏–Ω–∂–µ–Ω–µ—Ä–æ–º –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "üßπ –ü–æ–¥–º–µ—Å—Ç–∏ –ø–æ–ª—ã –≤ –∑–æ–Ω–µ –æ—Ç–¥—ã—Ö–∞"
]

tasks_status = {i + 1: "–Ω–µ –Ω–∞—á–∞—Ç–æ" for i in range(len(tasks))}
completed_history = []
evaluation_log = []
future_tasks = []

motivational_quotes = [
    "–î–∞–∂–µ —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –¥–æ—Ä–æ–≥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.",
    "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —É—Å–∏–ª–∏—è ‚Äî —ç—Ç–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –ø–æ–±–µ–¥—ã!",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞."
]

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í–∞—à chat_id: {update.effective_chat.id}")
    keyboard = [
        ["üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÜ –ó–∞–≤—Ç—Ä–∞"],
        ["ü§ñ AI-—Ä–µ–∂–∏–º", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "‚≠ê –û—Ü–µ–Ω–∏—Ç—å –¥–µ–Ω—å"],
        ["‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –¢—É–º—ç–Ω –ë–∞—è—Ä–æ–≤–∏—á! –Ø –Ω–∞ —Å–≤—è–∑–∏ üí™", reply_markup=reply_markup)

async def tasks_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today().strftime("%d.%m.%Y")
    msg = f"üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):
"
    for i, task in enumerate(tasks, 1):
        msg += f"{i}. {task} ‚Äî [{tasks_status[i]}]
"
    await update.message.reply_text(msg)

async def show_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if future_tasks:
        msg = "üìÜ –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞:
"
        for i, task in enumerate(future_tasks, 1):
            msg += f"{i}. {task}
"
        await update.message.reply_text(msg)
    else:
        await update.message.reply_text("–ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.")

async def show_ai_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quote = random.choice(motivational_quotes)
    done = sum(1 for s in tasks_status.values() if s == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    total = len(tasks)
    percent = int(done / total * 100) if total else 0
    await update.message.reply_text(f"üß† –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {quote}
–°–µ–≥–æ–¥–Ω—è: {done}/{total} –∑–∞–¥–∞—á ({percent}%)")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    done = sum(1 for _, _ in completed_history)
    postponed = sum(1 for s in tasks_status.values() if s == "–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ")
    in_progress = sum(1 for s in tasks_status.values() if s == "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {done}
üîÅ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {postponed}
üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress}")

async def update_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.strip().lower()
    if msg == "üìã –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        await tasks_today(update, context)
        return
    if msg == "üìÜ –∑–∞–≤—Ç—Ä–∞":
        await show_tomorrow(update, context)
        return
    if msg == "ü§ñ ai-—Ä–µ–∂–∏–º":
        await show_ai_mode(update, context)
        return
    if msg == "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_stats(update, context)
        return
    if msg == "‚ûï –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /v_zavtra –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
        return
    if msg == "‚≠ê –æ—Ü–µ–Ω–∏—Ç—å –¥–µ–Ω—å":
        await update.message.reply_text("–û—Ü–µ–Ω–∏ –¥–µ–Ω—å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:")
        return
    if msg == "‚ÑπÔ∏è —Å–ø—Ä–∞–≤–∫–∞":
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/tasks ‚Äî –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/zavtra ‚Äî –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/ai ‚Äî AI-—Ä–µ–∂–∏–º
/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/v_zavtra [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
        return

    parts = msg.split("-")
    if len(parts) == 2:
        try:
            num = int(parts[0].strip())
            action = parts[1].strip()
            if num in tasks_status:
                if "–Ω–∞—á–∞–ª" in action:
                    tasks_status[num] = "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
                elif "–≥–æ—Ç–æ–≤–æ" in action:
                    tasks_status[num] = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                    completed_history.append((datetime.datetime.now(), tasks[num - 1]))
                elif "–ø–µ—Ä–µ–Ω–æ—Å" in action:
                    tasks_status[num] = "–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ"
                await update.message.reply_text(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {num}. {tasks[num - 1]} ‚Äî [{tasks_status[num]}]")
        except:
            pass

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), update_status))
    app.run_polling()

if __name__ == '__main__':
    main()
